import requests
import random
import threading

# === ƒê·ªçc d·ªØ li·ªáu t·ª´ file ===
with open("mongmuon.txt", "r", encoding="utf-8") as f:
    momuon_list = [line.strip() for line in f if line.strip()]

# ==== D·ªØ li·ªáu m·∫´u ====
thich_all = [
    "C√°c b√†i h·ªçc th·ª≠ th√°ch (b√†i th·ª±c h√†nh)",
    "C√°c b√†i h·ªçc d·∫°ng video",
    "Gi·ªçng n√≥i ng∆∞·ªùi gi·∫£ng hay",
    "D·ªãch v·ª• h·ªó tr·ª£ l√†m b√†i t·∫≠p thu√™",
    "√Çm thanh to r√µ r√†ng, h√¨nh ·∫£nh s·∫Øc n√©t",
    "S·ª± t·∫≠n t√¢m, t√¢m huy·∫øt"
]

khong_thich_all = [
    "B√†i t·∫≠p h∆°i √≠t",
    "T√≠nh nƒÉng ghi ch√∫",
    "C√°c b√†i h·ªçc th·ª≠ th√°ch (b√†i th·ª±c h√†nh)"
]

# ==== Logic thich ====
def chon_thich_options():
    if random.random() < 0.6:
        return [
            "C√°c b√†i h·ªçc th·ª≠ th√°ch (b√†i th·ª±c h√†nh)",
            "C√°c b√†i h·ªçc d·∫°ng video",
            "S·ª± t·∫≠n t√¢m, t√¢m huy·∫øt"
        ]
    else:
        return random.sample(thich_all, k=random.randint(1, 5))

# ==== Logic khong thich ====
def chon_khong_thich():
    if random.random() < 0.7:
        other = [opt for opt in khong_thich_all if opt != "B√†i t·∫≠p h∆°i √≠t"]
        return ["B√†i t·∫≠p h∆°i √≠t"] + random.sample(other, k=random.randint(0, 2))
    else:
        return random.sample(khong_thich_all, k=random.randint(1, 3))

# ==== H√†m g·ª≠i 1 request ====
def send_request():
    payload = {
        "entry.1524771023": str(random.randint(4, 5)),
        "entry.1594930872": random.choice(momuon_list),
        "entry.366340186": chon_thich_options(),
        "entry.1122798691": chon_khong_thich()
    }

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0"
    }

    url = "https://docs.google.com/forms/u/0/d/e/1FAIpQLSeFJ1jC2uxepvB4FUpgFfeck5M5OeGyiAZT5hKwpJFFGGEABw/formResponse"

    def flatten(data):
        result = {}
        for key, value in data.items():
            if isinstance(value, list):
                for v in value:
                    result.setdefault(key, []).append(v)
            else:
                result[key] = value
        return result

    response = requests.post(url, data=flatten(payload), headers=headers)
    if response.ok:
        print("‚úÖ Th√†nh c√¥ng")
    else:
        print("‚ùå L·ªói:", response.status_code)

# ==== H√†m ch·∫°y trong t·ª´ng lu·ªìng ====
def worker(n):
    for _ in range(n):
        send_request()

# ==== Nh·∫≠p t·ª´ b√†n ph√≠m ====
total_requests = int(input("Nh·∫≠p t·ªïng s·ªë l·∫ßn g·ª≠i: "))
num_threads = int(input("Nh·∫≠p s·ªë lu·ªìng: "))

requests_per_thread = total_requests // num_threads
threads = []

for i in range(num_threads):
    t = threading.Thread(target=worker, args=(requests_per_thread,))
    threads.append(t)
    t.start()

# N·∫øu t·ªïng kh√¥ng chia h·∫øt, g·ª≠i ph·∫ßn c√≤n l·∫°i
for _ in range(total_requests % num_threads):
    send_request()

# ƒê·ª£i t·∫•t c·∫£ lu·ªìng k·∫øt th√∫c
for t in threads:
    t.join()

print("üéâ Ho√†n t·∫•t g·ª≠i t·∫•t c·∫£ request.")
